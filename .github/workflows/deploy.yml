# 健壮的部署脚本 - 修复SSH连接和指纹问题 - 2024
name: Deploy to Production

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Deploy to Server
      env:
        FEISHU_APP_ID: ${{ secrets.FEISHU_APP_ID }}
        FEISHU_APP_SECRET: ${{ secrets.FEISHU_APP_SECRET }}
        FEISHU_VERIFICATION_TOKEN: ${{ secrets.FEISHU_VERIFICATION_TOKEN }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        FIGMA_ACCESS_TOKEN: ${{ secrets.FIGMA_ACCESS_TOKEN }}
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SSH_PORT: ${{ secrets.SSH_PORT }}
      run: |
        set -e
        
        echo "🚀 开始部署..."
        
        # 验证必要的环境变量
        if [ -z "$SSH_PRIVATE_KEY" ] || [ -z "$SERVER_HOST" ] || [ -z "$SERVER_USER" ]; then
          echo "❌ 缺少必要的环境变量"
          echo "SSH_PRIVATE_KEY: $([ -n "$SSH_PRIVATE_KEY" ] && echo '已设置' || echo '未设置')"
          echo "SERVER_HOST: $([ -n "$SERVER_HOST" ] && echo '已设置' || echo '未设置')"
          echo "SERVER_USER: $([ -n "$SERVER_USER" ] && echo '已设置' || echo '未设置')"
          exit 1
        fi
        
        # 设置SSH端口
        SSH_PORT=${SSH_PORT:-22}
        echo "📡 SSH配置信息:"
        echo "  - 服务器: $SERVER_HOST"
        echo "  - 用户: $SERVER_USER" 
        echo "  - 端口: $SSH_PORT"
        
        # 设置SSH
        echo "🔑 配置SSH连接..."
        mkdir -p ~/.ssh
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # 验证私钥格式
        if ! ssh-keygen -l -f ~/.ssh/id_rsa > /dev/null 2>&1; then
          echo "❌ SSH私钥格式无效"
          exit 1
        fi
        echo "✅ SSH私钥验证通过"
        
        # 网络连接测试
        echo "🌐 测试网络连接..."
        if ! timeout 10 bash -c "echo >/dev/tcp/$SERVER_HOST/$SSH_PORT" 2>/dev/null; then
          echo "❌ 无法连接到 $SERVER_HOST:$SSH_PORT"
          echo "🔍 诊断信息:"
          echo "  - 请检查服务器地址是否正确"
          echo "  - 请检查SSH端口是否正确"
          echo "  - 请检查服务器防火墙设置"
          echo "  - 请检查SSH服务是否运行"
          
          # 尝试ping测试
          echo "📡 尝试ping测试..."
          if ping -c 3 -W 5 "$SERVER_HOST" > /dev/null 2>&1; then
            echo "✅ 服务器可以ping通"
          else
            echo "❌ 服务器无法ping通"
          fi
          exit 1
        fi
        echo "✅ 网络连接正常"
        
        # SSH配置
        cat > ~/.ssh/config << 'SSH_CONFIG'
        Host deploy-server
            HostName ${SERVER_HOST}
            User ${SERVER_USER}
            Port ${SSH_PORT}
            StrictHostKeyChecking no
            UserKnownHostsFile /dev/null
            IdentityFile ~/.ssh/id_rsa
            ConnectTimeout 30
            ServerAliveInterval 60
            ServerAliveCountMax 3
            TCPKeepAlive yes
        SSH_CONFIG
        
        # 替换配置文件中的变量
        sed -i "s/\${SERVER_HOST}/$SERVER_HOST/g" ~/.ssh/config
        sed -i "s/\${SERVER_USER}/$SERVER_USER/g" ~/.ssh/config  
        sed -i "s/\${SSH_PORT}/$SSH_PORT/g" ~/.ssh/config
        chmod 600 ~/.ssh/config
        
        # 测试SSH连接
        echo "🧪 测试SSH连接..."
        if ! timeout 60 ssh deploy-server "echo 'SSH连接测试成功'"; then
          echo "❌ SSH连接失败"
          echo "🔍 详细调试信息:"
          timeout 30 ssh -vvv deploy-server "echo 'test'" 2>&1 || true
          echo ""
          echo "💡 可能的解决方案:"
          echo "  1. 检查SSH密钥是否已添加到服务器authorized_keys"
          echo "  2. 确认服务器用户名正确"
          echo "  3. 检查服务器SSH配置文件"
          echo "  4. 确认防火墙允许SSH连接"
          exit 1
        fi
        echo "✅ SSH连接测试成功"
        
        # 打包代码
        echo "📦 打包代码..."
        tar -czf app.tar.gz --exclude='.git' --exclude='venv' --exclude='__pycache__' --exclude='*.pyc' .
        
        # 上传代码
        echo "📤 上传代码到服务器..."
        scp app.tar.gz deploy-server:/tmp/
        
        # 执行远程部署
        echo "🎯 执行远程部署..."
        ssh deploy-server "
        set -e
        
        echo '🔧 开始服务器端部署...'
        
        # 设置环境变量
        export FEISHU_APP_ID='$FEISHU_APP_ID'
        export FEISHU_APP_SECRET='$FEISHU_APP_SECRET'
        export FEISHU_VERIFICATION_TOKEN='$FEISHU_VERIFICATION_TOKEN'
        export GEMINI_API_KEY='$GEMINI_API_KEY'
        export FIGMA_ACCESS_TOKEN='$FIGMA_ACCESS_TOKEN'
        
        # 部署代码
        echo '📁 准备应用目录...'
        sudo mkdir -p /var/www/app
        sudo chown \$USER:\$USER /var/www/app
        cd /var/www/app
        
        # 备份旧版本
        if [ -d 'current' ]; then
          echo '📦 备份旧版本...'
          mv current backup-\$(date +%Y%m%d-%H%M%S)
        fi
        
        # 解压新代码
        echo '📂 解压新代码...'
        mkdir current
        tar -xzf /tmp/app.tar.gz -C current
        cd current
        
        # 检查Python环境
        echo '🐍 检查Python环境...'
        python3 --version
        
        # 创建虚拟环境
        echo '🔨 创建虚拟环境...'
        python3 -m venv venv
        source venv/bin/activate
        
        # 升级pip
        pip install --upgrade pip
        
        # 安装依赖
        echo '📚 安装依赖...'
        if [ -f 'requirements.txt' ]; then
          pip install -r requirements.txt
        else
          echo '⚠️ 未找到requirements.txt文件'
        fi
        
        # 创建环境变量文件
        echo '⚙️ 创建环境配置...'
        cat > .env << 'ENVFILE'
        FEISHU_APP_ID=\$FEISHU_APP_ID
        FEISHU_APP_SECRET=\$FEISHU_APP_SECRET
        FEISHU_VERIFICATION_TOKEN=\$FEISHU_VERIFICATION_TOKEN
        GEMINI_API_KEY=\$GEMINI_API_KEY
        FIGMA_ACCESS_TOKEN=\$FIGMA_ACCESS_TOKEN
        ENVIRONMENT=production
        ENVFILE
        
        # 检查主文件
        if [ ! -f 'api_server.py' ]; then
          echo '❌ api_server.py 文件不存在'
          ls -la
          exit 1
        fi
        
        # PM2 部署 (简化版本，假设已安装)
        echo '🔄 重启PM2服务...'
        pm2 delete product-auto-test 2>/dev/null || true
        pm2 start api_server.py --name product-auto-test --interpreter \$(pwd)/venv/bin/python
        pm2 save
        
        # 验证服务
        echo '🔍 验证服务状态...'
        sleep 3
        pm2 status
        
        # 清理临时文件
        rm /tmp/app.tar.gz
        
        echo '✅ 部署完成！'
        echo '📁 项目路径: '\$(pwd)
        "
        
        echo "🎉 部署流程完成！" 