name: 🚀 Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发

env:
  SERVER_IP: "18.141.179.222"
  APP_DIR: "/var/www/app/product-auto-test"
  NODE_VERSION: "18"

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Install pnpm
      run: npm install -g pnpm
      
    - name: 🔨 Build Frontend
      working-directory: src/chat_assistant/frontend
      run: |
        # 显示当前目录和文件
        pwd
        ls -la
        
        # 安装依赖
        pnpm install
        
        # 创建生产环境配置
        cat > .env.production << EOF
        VITE_API_BASE_URL=http://${{ env.SERVER_IP }}:8000
        VITE_APP_ENV=production
        VITE_API_TIMEOUT=300000
        VITE_DEBUG=false
        EOF
        
        # 构建项目
        pnpm build
        
    - name: 🗂️ Prepare Deployment Files
      run: |
        # 创建部署目录
        mkdir -p deployment
        
        # 复制Python代码
        cp -r src deployment/
        cp -r config deployment/ 2>/dev/null || true
        cp requirements.txt deployment/
        cp api_server.py deployment/
        cp start_api_server.py deployment/
        cp main.py deployment/
        cp *.py deployment/ 2>/dev/null || true
        
        # 复制前端构建文件
        mkdir -p deployment/frontend-dist
        cp -r src/chat_assistant/frontend/dist/* deployment/frontend-dist/
        

        
    - name: 📤 Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          # 创建应用目录
          sudo mkdir -p /var/www/app
          sudo chown $USER:$USER /var/www/app
          
          # 清理旧文件
          rm -rf ${{ env.APP_DIR }}
          mkdir -p ${{ env.APP_DIR }}
          
    - name: 📁 Upload Files
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ env.SERVER_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        source: "deployment/*"
        target: ${{ env.APP_DIR }}
        strip_components: 1
        
    - name: 🚀 Execute Deployment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          set -e  # 如果任何命令失败，立即退出
          
          cd ${{ env.APP_DIR }}
          echo "📂 当前目录: $(pwd)"
          
          echo "🛑 停止现有服务..."
          pm2 stop product-auto-test 2>/dev/null || echo "服务未运行"
          pm2 delete product-auto-test 2>/dev/null || echo "服务不存在"
          
          echo "🧹 清理旧环境..."
          rm -rf venv
          
          echo "🔧 安装系统依赖..."
          sudo apt-get update -qq
          sudo apt-get install -y python3-dev python3-pip python3-venv build-essential libopencv-dev
          
          echo "🐍 创建新的Python虚拟环境..."
          python3 -m venv venv
          source venv/bin/activate
          
          echo "📍 验证Python环境..."
          which python
          python --version
          
          echo "⬆️ 升级pip..."
          python -m pip install --upgrade pip
          
          echo "🧹 清理pip缓存..."
          pip cache purge
          
          echo "📦 安装Python依赖..."
          pip install --no-cache-dir -r requirements.txt
          
          echo "✅ 验证关键依赖安装..."
          python -c "import numpy; print(f'✅ numpy版本: {numpy.__version__}')"
          python -c "import cv2; print(f'✅ opencv版本: {cv2.__version__}')"
          python -c "import PIL; print(f'✅ PIL版本: {PIL.__version__}')"
          python -c "import flask; print(f'✅ Flask版本: {flask.__version__}')"
          
          echo "🧪 测试项目模块导入..."
          python -c "
          import sys
          sys.path.append('.')
          try:
              import numpy as np
              print('✅ numpy导入成功')
              from src.visual_comparison.comparator import VisualComparator
              print('✅ VisualComparator导入成功')
              from src.workflow.executor import WorkflowExecutor
              print('✅ WorkflowExecutor导入成功')
              print('🎉 所有核心模块导入测试通过!')
          except Exception as e:
              print(f'❌ 模块导入测试失败: {e}')
              exit(1)
          "
         
          echo "⚙️ 设置环境变量..."
          cat > .env << 'ENVEOF'
          FEISHU_APP_ID=${{ secrets.FEISHU_APP_ID }}
          FEISHU_APP_SECRET=${{ secrets.FEISHU_APP_SECRET }}
          FEISHU_VERIFICATION_TOKEN=${{ secrets.FEISHU_VERIFICATION_TOKEN }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          FIGMA_ACCESS_TOKEN=${{ secrets.FIGMA_ACCESS_TOKEN }}
          ENVIRONMENT=production
          ENVEOF
          
          echo "📍 确认Python解释器路径..."
          PYTHON_PATH=$(pwd)/venv/bin/python
          echo "Python解释器: $PYTHON_PATH"
          $PYTHON_PATH --version
          
          echo "🚀 启动PM2服务..."
          pm2 start api_server.py --name product-auto-test --interpreter $PYTHON_PATH
          
          echo "💾 保存PM2配置..."
          pm2 save
          
          echo "📊 检查PM2状态..."
          pm2 status
          
          echo "📝 查看服务日志..."
          pm2 logs product-auto-test --lines 10
          
          echo "✅ 部署完成！"
          
    - name: 🔍 Health Check
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ env.SERVER_IP }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "⏳ 等待服务启动..."
          sleep 15
          
          echo "📊 检查PM2进程状态..."
          pm2 status
          
          echo "📝 检查服务日志..."
          pm2 logs product-auto-test --lines 20
          
          echo "🔍 检查服务健康状态..."
          for i in {1..10}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "✅ 服务运行正常！"
              curl -s http://localhost:8000/health
              break
            else
              echo "⏳ 服务还未就绪，等待中... ($i/10)"
              if [ $i -eq 10 ]; then
                echo "❌ 健康检查失败，查看详细日志："
                pm2 logs product-auto-test --lines 50
                exit 1
              fi
              sleep 6
            fi
          done
        
    - name: 📊 Deployment Summary
      run: |
        echo "🎉 部署完成！"
        echo ""
        echo "🌐 访问地址："
        echo "  - 前端界面: http://${{ env.SERVER_IP }}:8000"
        echo "  - API服务: http://${{ env.SERVER_IP }}:8000/api"
        echo "  - 健康检查: http://${{ env.SERVER_IP }}:8000/health"
        echo ""
        echo "📊 服务架构："
        echo "  - 前端: Nginx静态服务"
        echo "  - 后端: PM2守护进程"
        echo "  - 代理: Nginx反向代理" 